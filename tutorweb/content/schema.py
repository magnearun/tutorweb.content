from zope import schema
from z3c.relationfield.schema import RelationList, RelationChoice

from plone.app.textfield import RichText
from plone.autoform import directives as form
from plone.formwidget.contenttree import ObjPathSourceBinder
from plone.namedfile.field import NamedBlobImage, NamedBlobFile
from plone.supermodel import model

from collective.z3cform.datagridfield import DictRow

from tutorweb.content import _


class ILaTeXQuestionAnswer(model.Schema):
    text = schema.TextLine(
        title=_(u'Answer text'),
        required=True)
    correct = schema.Bool(
        title=_(u'Correct?'),
        required=False)


class IQuestion(model.Schema):
    """Marker for anything question-ish"""


class ILaTeXQuestion(model.Schema):
    """Static question (i.e. one not generated by R)"""
    title = schema.TextLine(
        title=_(u'Question Title'),
        description=_(u'The title of the question'),
        required=True)
    image = NamedBlobImage(
        title=_(u'Question Image'),
        description=_(u'An image associated to the question'),
        required=False)
    text = RichText(
        title=u"Question text",
        default_mime_type='text/x-tex',
        output_mime_type='text/html',
        allowed_mime_types=('text/html', 'text/x-tex',),
        required=False)
    choices = schema.List(
        title=_(u"Answers"),
        description=_(u'''Specify the answer text, and whether it is correct.
        Answers will be displayed in a randomized order.'''),
        value_type=DictRow(title=u"tablerow", schema=ILaTeXQuestionAnswer),
        required=False)
    form.widget(choices=
                'collective.z3cform.datagridfield.DataGridFieldFactory')
    finalchoices = schema.List(
        title=_(u"Fixed answers at end"),
        description=_(u'''Specify the answer text, and whether it is correct.
        Answers will be displayed in a fixed order at the end of the answer list.'''),
        value_type=DictRow(title=u"tablerow", schema=ILaTeXQuestionAnswer),
        required=False)
    form.widget(finalchoices=
                'collective.z3cform.datagridfield.DataGridFieldFactory')
    explanation = RichText(
        title=u"Explanation text",
        description=_(u'Displayed to the student after the question is asked'),
        default_mime_type='text/x-tex',
        output_mime_type='text/html',
        allowed_mime_types=('text/html', 'text/x-tex', 'text/x-web-intelligent'),
        required=False)
    timesanswered = schema.Int(
        title=_(u'Number of times answered'),
        default=0,
        required=True)
    timescorrect = schema.Int(
        title=_(u'Number of times correct'),
        default=0,
        required=True)

class ILecture(model.Schema):
    """A lecture contains Slides and quiz questions"""
    id = schema.TextLine(
        title=_(u'Lecture code'),
        description=_(u"Code for this lecture, e.g. 'lecture01'"),
        required=True)
    title = schema.TextLine(
        title=_(u'Title'),
        description=_(u'The title of the lecture'),
        required=True)
    histsel = schema.Float(
        title=_(u'Historical Selection probability'),
        description=_(u'''The chance that a question before this given as part
                      of this lecture. A negative value will mean the default
                      for this tutorial is used.'''),
        default=-1.0,
        min=-1.0,
        max=1.0,
        required=True)
    pdf=NamedBlobFile(
        title=_(u'Generated lecture PDF'),
        required=False)

class ITutorial(model.Schema):
    """A Tutorial contains lectures"""
    id = schema.TextLine(
        title=_(u'Tutorial code'),
        description=_(u"Code for this tutorial, e.g. 'FISH101.1'"),
        required=True)
    title = schema.TextLine(
        title=_(u'Title'),
        description=_(u'The title of the tutorial'),
        required=True)
    language = schema.Choice(
        title=_(u'Language'),
        description=_(u'Language tutorial notes are in'),
        vocabulary=u'plone.app.vocabularies.SupportedContentLanguages',
        default='English',
        required=True)
    author = schema.TextLine(
        title=_(u'Author'),
        description=_(u'Author(s) of the tutorial'),
        required=True)
    credits = schema.Int(
        title=_(u'Credits'),
        description=_(u'Number of Credits given for the tutorial'),
        default=0,
        required=True)
    histsel = schema.Float(
        title=_(u'Default Historical Selection probability'),
        description=_(u'''The default chance that a question from previous lectures
                      is given as part of the current'''),
        default=0.0,
        min=0.0,
        max=1.0,
        required=True)
    primarycourse = RelationChoice(
        title=_(u'Primary Course'),
        description=_(u"The main course this tutorial is part of"),
        source=ObjPathSourceBinder(Type='Course'),
        required=True)
    pdf=NamedBlobFile(
        title=_(u'Generated tutorial PDF'),
        required=False)

class IDepartment(model.Schema):
    id = schema.TextLine(
        title=_(u'Department code'),
        description=_(u"The short code for the department, e.g. 'FISH'"),
        required=True)
    title = schema.TextLine(
        title=_(u'Department title'),
        description=_(u"The name of the department, e.g. 'Fishery science department'"),
        required=True)

class ICourse(model.Schema):
    id = schema.TextLine(
        title=_(u'Course code'),
        description=_(u"The short code for the course, e.g. '101'"),
        required=True)
    title = schema.TextLine(
        title=_(u'Course title'),
        description=_(u"The name of the course"),
        required=True)
    tutorials = RelationList(
        title=_(u'Course tutorials'),
        description=_(u"All tutorials this course contains"),
        default=[],
        value_type=RelationChoice(
            source=ObjPathSourceBinder(Type='Tutorial'),
        ),
        required=False)
